# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import datetime
import json
import re

# –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import psutil
from pyrogram import Client, filters, types

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from constants import API_ID, API_HASH, BOT_TOKEN, LOG_CHANNEL_ID


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–º–µ–Ω
with open('dictionary.json', 'r') as file:
    replacement_table = json.load(file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def process_text(text):
    words = re.findall(r'\b\w+\b|[.,!?;]', text)
    processed_text = []
    for word in words:
        if len(word) >= 3 and word[-1] in replacement_table:
            word = word[:-1] + replacement_table[word[-1]]
        processed_text.append(word)
    return ' '.join(processed_text)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
app = Client("sberprimeplus", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

@app.on_message(filters.command("start") & filters.private)
async def start(client, message):
    await message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ!")
    user_info = f"{message.from_user.first_name} {message.from_user.last_name or ''}, @{message.from_user.username or ''}, ({message.from_user.id})"
    await client.send_message(LOG_CHANNEL_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –Ω–∞—á–∞–ª —á–∞—Ç.")

@app.on_message(filters.command("status"))
async def status(client, message):
    if message.from_user.id == 152204223:
        cpu_load = psutil.cpu_percent()
        ram = psutil.virtual_memory()
        uptime = datetime.datetime.now() - datetime.datetime.fromtimestamp(psutil.boot_time())
        cpu_temp = psutil.sensors_temperatures().get('coretemp', [None])[0]
        if cpu_temp: cpu_temp = cpu_temp.current
        else: cpu_temp = 'N/A'

        status_message = (
            f"üñ• CPU Load: {cpu_load}%\n"
            f"üß† RAM: {ram.used / (1024 ** 2):.0f} MiB / {ram.total / (1024 ** 2):.0f} MiB\n"
            f"‚è± Uptime: {str(uptime).split('.')[0]}\n"
            f"üå° CPU temp: {cpu_temp}¬∞ C"
        )
        await message.reply_text(status_message)

@app.on_message(filters.text & filters.private & ~filters.command(["start", "status"]))
async def echo(client, message):
    processed_text = process_text(message.text)
    await message.reply_text(processed_text)
    user_info = f"{message.from_user.first_name} {message.from_user.last_name or ''}, @{message.from_user.username or ''}, ({message.from_user.id})"
    await client.send_message(LOG_CHANNEL_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {processed_text}")

@app.on_inline_query()
async def inline(client, query):
    query_text = query.query
    processed_text = process_text(query_text)

    # –°–æ–∑–¥–∞–Ω–∏–µ InlineQueryResultArticle –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    results = [
        types.InlineQueryResultArticle(
            title="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¢–µ–∫—Å—Ç",
            input_message_content=types.InputTextMessageContent(processed_text),
            description=processed_text,
        )
    ]

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await client.answer_inline_query(query.id, results=results, cache_time=10)
    user_info = f"{query.from_user.first_name} {query.from_user.last_name or ''}, @{query.from_user.username or ''}, ({query.from_user.id})"
    await client.send_message(LOG_CHANNEL_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} —Å–¥–µ–ª–∞–ª inline –∑–∞–ø—Ä–æ—Å: {query_text}\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {processed_text}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run()
