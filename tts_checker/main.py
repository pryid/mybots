# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import json
import re
import time
from datetime import timedelta

# –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import httpx
import psutil
from bs4 import BeautifulSoup
from pyrogram import Client, filters
from pyrogram.types import KeyboardButton, ReplyKeyboardMarkup

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from constants import API_ID, API_HASH, BOT_TOKEN, LOG_CHANNEL_ID, FEEDBACK_USER_ID

# –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏

user_data_file = '/app/data/tts_checker.json'

app = Client("tts_checker", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

try:
    with open(user_data_file, 'r') as file:
        user_data = json.load(file)
except FileNotFoundError:
    user_data = {}

waiting_for_card_number = {}
waiting_for_feedback = {}


def create_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("–ë–∞–ª–∞–Ω—Å"), KeyboardButton("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"), KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")]
    ], resize_keyboard=True)


@app.on_message(filters.command(["start", "help"]))
async def start(client, message):
    await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", reply_markup=create_keyboard())


@app.on_message(filters.command("status"))
async def status(client, message):
    if message.from_user.id == FEEDBACK_USER_ID:
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            ram_info = psutil.virtual_memory()
            uptime_seconds = int(time.time() - psutil.boot_time())
            uptime = str(timedelta(seconds=uptime_seconds))

            status_message = (
                f"üñ• CPU Load: {cpu_percent}%\n"
                f"üß† RAM: {ram_info.used // (2 ** 20)} MiB / {ram_info.total // (2 ** 20)} MiB\n"
                f"‚è± Uptime: {uptime}"
            )
            await message.reply_text(status_message)
        except Exception as error:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {error}")
    else:
        await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@app.on_message(filters.text & ~filters.regex("^/"))
async def on_text_message(client, message):
    user_id = message.from_user.id
    user_info = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}, @{message.from_user.username or ''} ({user_id})"
    await app.send_message(LOG_CHANNEL_ID, f"Received message from {user_info}: {message.text}")

    if message.text in ["–ë–∞–ª–∞–Ω—Å", "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]:
        waiting_for_card_number.pop(user_id, None)
        waiting_for_feedback.pop(user_id, None)

    if message.text == "–ë–∞–ª–∞–Ω—Å":
        await check(client, message)
    elif message.text == "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã":
        user_id_str = str(user_id)
        if user_id_str in user_data:
            await message.reply_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {user_data[user_id_str]}\n"
                                     f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")
            waiting_for_card_number[user_id] = True
        else:
            waiting_for_card_number[user_id] = True
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")
    elif message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        waiting_for_feedback[user_id] = True
        await message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º, —è –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É.")
    else:
        await handle_others(client, message, user_id)


async def handle_others(client, message, user_id):
    if user_id in waiting_for_card_number:
        await handle_card_number(client, message, user_id)
    elif user_id in waiting_for_feedback:
        await handle_feedback(client, message, user_id)
    else:
        await message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ /start.")


async def handle_card_number(client, message, user_id):
    card_number = message.text
    if not re.match(r"^\d{1,20}$", card_number):
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")
        return
    user_data[str(user_id)] = card_number
    with open(user_data_file, 'w') as file:
        json.dump(user_data, file)
    del waiting_for_card_number[user_id]
    await message.reply_text(f"–í–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã {card_number} –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ë–∞–ª–∞–Ω—Å' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞!")


async def handle_feedback(client, message, user_id):
    user_info = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}, @{message.from_user.username or ''}"
    feedback_text = f"Feedback from {user_info}:\n{message.text}"
    await app.send_message(FEEDBACK_USER_ID, feedback_text)
    del waiting_for_feedback[user_id]
    await message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")


@app.on_message(filters.command("check"))
async def check(client, message):
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'.")
        return

    card_number = user_data[user_id]
    url = 'https://oao-tts.ru/ttsfind/'
    data = {'submit': 'echo:card.check', 'nomer': card_number}

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, data=data)
            response.raise_for_status()
    except httpx.RequestError:
        await message.reply_text('Failed to send POST request.')
        return

    soup = BeautifulSoup(response.text, 'lxml')
    element = soup.select_one('.b-balance-card > tbody:nth-child(1) > tr:nth-child(2) > td:nth-child(2)')
    if element:
        for a_tag in element.find_all('a'):
            a_tag.decompose()
        await message.reply_text(element.text.strip())
    else:
        await message.reply_text('–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã, –ª–∏–±–æ —Å–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–∂–º–∏—Ç–µ \'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã.')


app.run()
